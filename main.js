(()=>{"use strict";var n={800:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Arvo&display=swap);"]),a.push([n.id,'*{padding:0;margin:0;box-sizing:border-box}body{overflow-y:auto;overflow-x:hidden;font-family:"Lato",sans-serif;min-width:500px;background-color:#f8f8ff}.container{min-height:100vh;min-width:100vw;background-color:#f8f8ff;display:grid;grid-template:125px 50px 1fr 50px/1fr}.header{grid-area:1/1/2/2;color:rgba(0,0,0,.7);font-family:"Arvo","serif";font-size:22px;place-self:center}#display-info{grid-area:2/1/3/2;color:rgba(0,0,0,.7);font-size:13px;place-self:center}.content{display:grid;grid-template:1fr/.4fr .2fr .4fr;grid-area:3/1/4/2}.content .board{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:20px}.content .board .size-wrapper{color:rgba(0,0,0,.7);font-size:13px}.content .board .size-wrapper p{margin-bottom:10px}.content .board .size-wrapper .slider{-webkit-appearance:none;width:100%;height:10px;background:#d3d3d3;outline:none;opacity:.7;-webkit-transition:.2s;transition:opacity .2s;border-radius:7px}.content .board .size-wrapper .slider:hover{opacity:1}.content .board .size-wrapper .slider::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:12px;height:12px;background:#04aa6d;cursor:pointer}.content .board .size-wrapper .slider::-moz-range-thumb{width:12px;height:12px;background:#5f9ea0;cursor:pointer}.content .board #board{transform:rotateX(180deg);place-self:center;height:300px;width:300px;outline:.5px solid rgba(0,0,0,.5)}.content .board #board .even{background-color:rgba(0,0,0,.5)}.content .board #board .row{width:100%;display:flex}.content .board #board .square{outline:.25px dotted #f8f8ff}.content .board #board .square:hover{background-color:#5f9ea0;outline:.5px dotted #f8f8ff;cursor:pointer}.content .Knight-controls{display:flex;align-items:center;justify-content:center;flex-direction:column;gap:60px}.content .Knight-controls #Knight-img-image{width:40px;height:40px;cursor:pointer;margin-bottom:-40px}.content .Knight-controls #randomly-place,.content .Knight-controls #reset{border:.5px solid rgba(0,0,0,.5);padding:7px 12px;border-radius:7px;font-size:13px;color:rgba(0,0,0,.7);margin-bottom:-40px}.content .Knight-controls #randomly-place:hover,.content .Knight-controls #reset:hover{background-color:rgba(0,0,0,.5);color:#f8f8ff;border:.5px solid #f8f8ff;cursor:pointer}.content .Knight-controls .performance{display:flex;flex-direction:column;gap:10px;align-items:center;font-size:13px;color:rgba(0,0,0,.7)}.content .Knight-controls #performance-time,.content .Knight-controls #squares-visited{margin-bottom:5px;height:10px}.content .which-Knight{display:flex;flex-direction:column;justify-content:center;align-items:center;gap:15px}.content .which-Knight #travail-Knight,.content .which-Knight #tour-Knight,.content .which-Knight #tour-Knight-Warnsdorff{display:flex;align-items:center;justify-content:center;width:175px;height:55px;padding:5px;background-color:rgba(95,158,160,.831);color:#f8f8ff;border-radius:7px;font-family:"Lato",sans-serif;font-size:13px;text-align:center;line-height:18px;cursor:pointer}.content .which-Knight #travail-Knight:hover,.content .which-Knight #tour-Knight:hover,.content .which-Knight #tour-Knight-Warnsdorff:hover{background-color:#5f9ea0;outline:.5px dotted #f8f8ff;font-weight:700}.footer{display:flex;align-items:center;background-color:rgba(0,0,0,.3);grid-area:4/1/5/2}.footer .made-by{color:#f8f8ff;display:flex;flex-direction:row;align-items:center;justify-content:center;gap:10px;font-size:13px;padding:7px;border-radius:7px;width:100%}.footer .made-by a{text-decoration:none;color:#f8f8ff}.footer .made-by img{height:16px;transition:transform .3s ease-in-out}.footer .made-by #github-icon{max-height:16px}.footer .made-by img:hover{transform:rotate(360deg) scale(1.2)}',"",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAWA,EACE,SAAA,CACA,QAAA,CACA,qBAAA,CAGF,KACE,eAAA,CACA,iBAAA,CACA,6BAbU,CAcV,eAAA,CACA,wBApBiB,CAuBnB,WACE,gBAAA,CACA,eAAA,CACA,wBA1BiB,CA2BjB,YAAA,CACA,qCAAA,CAGF,QACE,iBAAA,CACA,oBAAA,CACA,0BAAA,CACA,cAAA,CACA,iBAAA,CAGF,cACE,iBAAA,CACA,oBAAA,CACA,cAAA,CACA,iBAAA,CAGF,SACE,YAAA,CACA,gCAAA,CACA,iBAAA,CACA,gBACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CACA,QAAA,CACA,8BACE,oBAAA,CACA,cAAA,CACA,gCACE,kBAAA,CAEF,sCACE,uBAAA,CACA,UAAA,CACA,WAAA,CACA,kBAAA,CACA,YAAA,CACA,UAAA,CACA,sBAAA,CACA,sBAAA,CACA,iBAAA,CAGF,4CACE,SAAA,CAGF,4DACE,uBAAA,CACA,eAAA,CACA,UAAA,CACA,WAAA,CACA,kBAAA,CACA,cAAA,CAGF,wDACE,UAAA,CACA,WAAA,CACA,kBAAA,CACA,cAAA,CAGJ,uBACE,yBAAA,CACA,iBAAA,CACA,YAAA,CACA,WAAA,CACA,iCAAA,CACA,6BACE,+BAAA,CAEF,4BACE,UAAA,CACA,YAAA,CAEF,+BACE,4BAAA,CACA,qCACE,wBAAA,CACA,2BAAA,CACA,cAAA,CAKR,0BACE,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,qBAAA,CACA,QAAA,CACA,4CACE,UAAA,CACA,WAAA,CACA,cAAA,CACA,mBAAA,CAEF,2EAEE,gCAAA,CACA,gBAAA,CACA,iBAAA,CACA,cAAA,CACA,oBAAA,CACA,mBAAA,CACA,uFACE,+BAAA,CACA,aAAA,CACA,yBAAA,CACA,cAAA,CAGJ,uCACE,YAAA,CACA,qBAAA,CACA,QAAA,CACA,kBAAA,CACA,cAAA,CACA,oBAAA,CAEF,uFAEE,iBAAA,CACA,WAAA,CAGJ,uBACE,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,QAAA,CACA,0HAGE,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,sCAAA,CACA,aAAA,CACA,iBAAA,CACA,6BA3KM,CA4KN,cAAA,CACA,iBAAA,CACA,gBAAA,CACA,cAAA,CACA,4IACE,wBAAA,CACA,2BAAA,CACA,eAAA,CAMR,QACE,YAAA,CACA,kBAAA,CACA,+BAAA,CACA,iBAAA,CACA,iBACE,aApMe,CAqMf,YAAA,CACA,kBAAA,CACA,kBAAA,CACA,sBAAA,CACA,QAAA,CACA,cAAA,CACA,WAAA,CACA,iBAAA,CACA,UAAA,CACA,mBACE,oBAAA,CACA,aAhNa,CAkNf,qBACE,WAAA,CACA,oCAAA,CAEF,8BACE,eAAA,CAEF,2BACE,mCAAA",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Arvo&display=swap");\n\n$background-color: rgb(248, 248, 255);\n$board-color: rgba(248, 248, 255, 0.9);\n$ship-color: #e2c08c;\n$highlight-color: #6a7aac;\n$header-font: "Original Surfer", "cursive";\n$main-font: "Lato", sans-serif;\n$medium: 760px;\n$small: 500px;\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  overflow-y: auto;\n  overflow-x: hidden;\n  font-family: $main-font;\n  min-width: 500px;\n  background-color: $background-color;\n}\n\n.container {\n  min-height: 100vh;\n  min-width: 100vw;\n  background-color: $background-color;\n  display: grid;\n  grid-template: 125px 50px 1fr 50px / 1fr;\n}\n\n.header {\n  grid-area: 1 / 1 / 2 / 2;\n  color: rgba(0, 0, 0, 0.7);\n  font-family: "Arvo", "serif";\n  font-size: 22px;\n  place-self: center;\n}\n\n#display-info {\n  grid-area: 2 / 1 / 3 / 2;\n  color: rgba(0, 0, 0, 0.7);\n  font-size: 13px;\n  place-self: center;\n}\n\n.content {\n  display: grid;\n  grid-template: 1fr / 0.4fr 0.2fr 0.4fr;\n  grid-area: 3 / 1 / 4 / 2;\n  .board {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 20px;\n    .size-wrapper {\n      color: rgba(0, 0, 0, 0.7);\n      font-size: 13px;\n      p {\n        margin-bottom: 10px;\n      }\n      .slider {\n        -webkit-appearance: none;\n        width: 100%;\n        height: 10px;\n        background: #d3d3d3;\n        outline: none;\n        opacity: 0.7;\n        -webkit-transition: 0.2s;\n        transition: opacity 0.2s;\n        border-radius: 7px;\n      }\n\n      .slider:hover {\n        opacity: 1;\n      }\n\n      .slider::-webkit-slider-thumb {\n        -webkit-appearance: none;\n        appearance: none;\n        width: 12px;\n        height: 12px;\n        background: #04aa6d;\n        cursor: pointer;\n      }\n\n      .slider::-moz-range-thumb {\n        width: 12px;\n        height: 12px;\n        background: cadetblue;\n        cursor: pointer;\n      }\n    }\n    #board {\n      transform: rotateX(180deg);\n      place-self: center;\n      height: 300px;\n      width: 300px;\n      outline: 0.5px solid rgba(0, 0, 0, 0.5);\n      .even {\n        background-color: rgba(0, 0, 0, 0.5);\n      }\n      .row {\n        width: 100%;\n        display: flex;\n      }\n      .square {\n        outline: 0.25px dotted ghostwhite;\n        &:hover {\n          background-color: cadetblue;\n          outline: 0.5px dotted ghostwhite;\n          cursor: pointer;\n        }\n      }\n    }\n  }\n  .Knight-controls {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    gap: 60px;\n    #Knight-img-image {\n      width: 40px;\n      height: 40px;\n      cursor: pointer;\n      margin-bottom: -40px;\n    }\n    #randomly-place,\n    #reset {\n      border: 0.5px solid rgba(0, 0, 0, 0.5);\n      padding: 7px 12px;\n      border-radius: 7px;\n      font-size: 13px;\n      color: rgba(0, 0, 0, 0.7);\n      margin-bottom: -40px;\n      &:hover {\n        background-color: rgba(0, 0, 0, 0.5);\n        color: ghostwhite;\n        border: 0.5px solid ghostwhite;\n        cursor: pointer;\n      }\n    }\n    .performance {\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n      align-items: center;\n      font-size: 13px;\n      color: rgba(0, 0, 0, 0.7);\n    }\n    #performance-time,\n    #squares-visited {\n      margin-bottom: 5px;\n      height: 10px;\n    }\n  }\n  .which-Knight {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 15px;\n    #travail-Knight,\n    #tour-Knight,\n    #tour-Knight-Warnsdorff {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 175px;\n      height: 55px;\n      padding: 5px;\n      background-color: rgba(95, 158, 160, 0.831);\n      color: ghostwhite;\n      border-radius: 7px;\n      font-family: $main-font;\n      font-size: 13px;\n      text-align: center;\n      line-height: 18px;\n      cursor: pointer;\n      &:hover {\n        background-color: cadetblue;\n        outline: 0.5px dotted ghostwhite;\n        font-weight: 700;\n      }\n    }\n  }\n}\n\n.footer {\n  display: flex;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.3);\n  grid-area: 4 / 1 / 5 / 2;\n  .made-by {\n    color: $background-color;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    font-size: 13px;\n    padding: 7px;\n    border-radius: 7px;\n    width: 100%;\n    a {\n      text-decoration: none;\n      color: $background-color;\n    }\n    img {\n      height: 16px;\n      transition: transform 0.3s ease-in-out;\n    }\n    #github-icon {\n      max-height: 16px;\n    }\n    img:hover {\n      transform: rotate(360deg) scale(1.2);\n    }\n  }\n}\n'],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(a[A]=!0)}for(var l=0;l<n.length;l++){var s=[].concat(n[l]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),e.push(s))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],c=0;c<n.length;c++){var A=n[c],l=r.base?A[0]+r.base:A[0],s=i[l]||0,u="".concat(l," ").concat(s);i[l]=s+1;var d=t(u),f={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=o(f,r);r.byIndex=c,e.splice(c,0,{identifier:u,updater:p,references:1})}a.push(u)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var A=r(n,o),l=0;l<i.length;l++){var s=t(i[l]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}i=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{const n=t.p+"7a99c8d1e4d939aaa2a3.ico",e=t.p+"4d74fd76ac168df7723c.png",r=t.p+"840700f92da70c0dc5ca.png";var o=t(379),i=t.n(o),a=t(795),c=t.n(a),A=t(569),l=t.n(A),s=t(565),u=t.n(s),d=t(216),f=t.n(d),p=t(589),m=t.n(p),g=t(800),y={};function h(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}y.styleTagTransform=m(),y.setAttributes=u(),y.insert=l().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=f(),i()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals;const C=function(n,e,t){var r={xPosition:n,yPosition:e,boardSize:8,dis:t||0,parent:null,board:null},o=[[2,1],[2,-1],[-2,1],[-2,-1],[1,2],[1,-2],[-1,2],[-1,-2]],i=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r.xPosition,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.yPosition,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.boardSize;return n>=1&&n<=t&&e>=1&&e<=t};return{data:r,updateBoardSize:function(n){r.boardSize=n},getParent:function(){return r.parent},setParent:function(n){return r.parent=n},checkMove:i,possibleMoves:function(){var n=o.map((function(n){return[r.xPosition+n[0],r.yPosition+n[1]]})),e=new Set(n.map((function(n){return JSON.stringify(n)})));return Array.from(e).map((function(n){return JSON.parse(n)})).filter((function(n){return i(n[0],n[1])}))},createBoard:function(){var n;r.board=(n=Array(r.boardSize),function(n){if(Array.isArray(n))return h(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,e){if(n){if("string"==typeof n)return h(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?h(n,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(){return Array(r.boardSize).fill("")}))}}};function b(n){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},b(n)}function v(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}const x=function(n,e,t){var r=C(n[0],n[1]),o=C(e[0],e[1]);if(r.setParent("HEAD"),t&&(r.updateBoardSize(t),o.updateBoardSize(t)),!r.checkMove()||!o.checkMove())return null;var i,a=[r],c=r.data.boardSize,A=(i=Array(c),function(n){if(Array.isArray(n))return v(n)}(i)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(i)||function(n,e){if(n){if("string"==typeof n)return v(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?v(n,e):void 0}}(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(){return Array(c).fill(!1)}));A[n[0]-1][n[1]-1]=!0;for(var l=function(){var n=a.shift();if(n.data.xPosition===o.data.xPosition&&n.data.yPosition===o.data.yPosition){o.setParent(n.data.parent);for(var e=[o];!e.includes(r);){var i=e[0].getParent();e.unshift(i)}var c=[];return e.forEach((function(n){return c.push([n.data.xPosition,n.data.yPosition])})),{v:[n.data.dis,c]}}n.possibleMoves().forEach((function(e){if(!A[e[0]-1][e[1]-1]){A[e[0]-1][e[1]-1]=!0;var r=C(e[0],e[1],n.data.dis+1);t&&r.updateBoardSize(t),r.setParent(n),a.push(r)}}))};0!==a.length;){var s=l();if("object"===b(s))return s.v}return 1/0};function E(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i=[],a=!0,c=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){c=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(c)throw o}}return i}}(n,e)||w(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function w(n,e){if(n){if("string"==typeof n)return B(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?B(n,e):void 0}}function B(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}const S=function(n,e,t){var r=C(n,e);if(t&&r.updateBoardSize(t),!r.checkMove())return null;var o,i=r.data.boardSize;return function n(e,t,r,o){var i=C(e,t);i.updateBoardSize(o);var a=function(n){return n.map((function(n){return n.slice()}))}(r);a[e-1][t-1]=!0;var c=i.possibleMoves(),A=[];if(c.forEach((function(n){!1===a[n[0]-1][n[1]-1]&&A.push(n)})),0===A.length)return!!function(n){return n.every((function(n){return n.every((function(n){return n}))}))}(a)&&[[e,t]];var l,s=function(n,e){var t="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!t){if(Array.isArray(n)||(t=w(n))){t&&(n=t);var r=0,o=function(){};return{s:o,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(n)},n:function(){var n=t.next();return a=n.done,n},e:function(n){c=!0,i=n},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(A);try{for(s.s();!(l=s.n()).done;){var u=E(l.value,2),d=n(u[0],u[1],a,o);if(d)return d.push([e,t]),d}}catch(n){s.e(n)}finally{s.f()}return!1}(n,e,(o=Array(i),function(n){if(Array.isArray(n))return B(n)}(o)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(o)||w(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(){return Array(i).fill(!1)})),t||8).reverse()};function k(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i=[],a=!0,c=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){c=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(c)throw o}}return i}}(n,e)||T(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(n,e){var t="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!t){if(Array.isArray(n)||(t=T(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var r=0,o=function(){};return{s:o,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(n)},n:function(){var n=t.next();return a=n.done,n},e:function(n){c=!0,i=n},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function T(n,e){if(n){if("string"==typeof n)return z(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?z(n,e):void 0}}function z(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}const K=function(n,e,t){var r=C(n,e);if(t&&r.updateBoardSize(t),!r.checkMove())return null;var o,i=r.data.boardSize,a=(o=Array(i),function(n){if(Array.isArray(n))return z(n)}(o)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(o)||T(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(){return Array(i).fill(!1)})),c=function(n,e){var t=[];return n.forEach((function(n){!1===e[n[0]-1][n[1]-1]&&t.push(n)})),t};return function n(e,t,r,o){var i=C(e,t);i.updateBoardSize(o);var a=function(n){return n.map((function(n){return n.slice()}))}(r);a[e-1][t-1]=!0;var A=i.possibleMoves(),l=c(A,a);if(0===l.length)return!!function(n){return n.every((function(n){return n.every((function(n){return n}))}))}(a)&&[[e,t]];var s,u=function(n,e,t){var r,o=[],i=I(n);try{for(i.s();!(r=i.n()).done;){var a=k(r.value,2),A=a[0],l=a[1],s=C(A,l);s.updateBoardSize(t);var u=s.possibleMoves(),d=c(u,e).length;o.push({move:[A,l],weight:d})}}catch(n){i.e(n)}finally{i.f()}return o.sort((function(n,e){return n.weight-e.weight})).map((function(n){return n.move}))}(l,a,o),d=I(u);try{for(d.s();!(s=d.n()).done;){var f=k(s.value,2),p=n(f[0],f[1],a,o);if(p)return p.push([e,t]),p}}catch(n){d.e(n)}finally{d.f()}return!1}(n,e,a,t||8).reverse()};!function(){var n,e,t,o,i,a=6,c=document.getElementById("board"),A=document.getElementById("myRange");A.value=6;var l=function(){var n;u(),n=A.value,a=n,s(),i.forEach((function(n){n.style.height=300/"".concat(A.value)+"px",n.style.width=300/"".concat(A.value)+"px"})),document.getElementById("board-size").textContent=A.value+" x "+A.value,document.getElementById("Knight-img-image").style.opacity="1",y.style.pointerEvents="",C.style.pointerEvents=""};A.addEventListener("input",l);var s=function(){for(var n=1,e=0;e<a;e++){var t=document.createElement("div");t.classList.add("row");for(var r=0;r<a;r++){var o=document.createElement("div");o.classList.add("square"),o.dataset.num=n,n++,o.style.height=300/"".concat(A.value)+"px",o.style.width=300/"".concat(A.value)+"px",e%2==0?r%2==0?o.classList.add("odd"):o.classList.add("even"):r%2==0?o.classList.add("even"):o.classList.add("odd"),t.appendChild(o)}c.appendChild(t)}(i=Array.from(document.getElementsByClassName("square"))).forEach((function(n){n.addEventListener("mousedown",(function(){return p(n)}))}))};s();var u=function(){for(;c.firstChild;)c.removeChild(c.lastChild)},d=function(n){return[n.dataset.num%a==0?Number(a):n.dataset.num%a,Math.round(Math.ceil(Number(n.dataset.num)/a))]},f=function(n){return n[1]*a+n[0]-a},p=function(t){var r=d(t);n=r[0],e=r[1],g(t)},m=document.getElementById("Knight-img-image"),g=function(n){document.getElementById("icon")&&(document.getElementById("icon").parentElement.style.backgroundColor="",document.getElementById("icon").remove(),document.getElementById("START")&&(document.getElementById("START").style.backgroundColor="rgba(95, 158, 160, 0.831)"));var e=document.createElement("img");e.setAttribute("id","icon"),e.src=r,e.style.transform+=" rotateX(180deg)",e.style.height=300/a+"px",e.style.width=300/a+"px",n.style.backgroundColor="cadetblue",n.appendChild(e),m.style.opacity="0",m.style.cursor="default"},y=document.getElementById("randomly-place");y.addEventListener("mousedown",(function(){var t,r=(t=a*a,Math.floor(Math.random()*(t-1+1)+1)),o=document.querySelector('[data-num="'.concat(r,'"]')),i=d(o);n=i[0],e=i[1],g(o)})),c.addEventListener("dragover",(function(n){n.preventDefault()})),c.addEventListener("drop",(function(t){var r=d(t.target);n=r[0],e=r[1],g(t.target)}));var h=document.getElementById("performance-time");document.getElementById("reset").addEventListener("mousedown",(function(){document.getElementById("display-info").innerText="Drag the Knight onto the chessboard or click one of the buttons below to get started...",document.getElementById("icon")&&(document.getElementById("icon").parentElement.style.backgroundColor="",document.getElementById("icon").remove(),m.style.opacity="",m.style.cursor=""),u(),s(),y.style.pointerEvents="",C.style.backgroundColor="",C.style.fontWeight="",b.style.backgroundColor="",b.style.pointerEvents="",v.style.backgroundColor="",v.style.pointerEvents="",n=void 0,e=void 0,t=void 0,o=void 0,document.getElementById("squares-visited").innerText="",h.innerText="",m.style.opacity="",A.value=6,l()}));var C=document.getElementById("travail-Knight"),b=document.getElementById("tour-Knight"),v=document.getElementById("tour-Knight-Warnsdorff");C.addEventListener("mousedown",(function(){!function(r){if(n&&e&&!t&&!o){t=n,o=e,n=void 0,e=void 0,document.getElementById("display-info").innerText="Choose an ending square for the Knight";var c=f([t,o]),A=document.querySelector('[data-num="'.concat(c,'"]'));A.setAttribute("id","START"),A.style.backgroundColor="rgba(95, 158, 160, 0.831)",C.style.backgroundColor="cadetblue",C.style.fontWeight="bold",b.style.backgroundColor="gainsboro",b.style.pointerEvents="none",v.style.backgroundColor="gainsboro",v.style.pointerEvents="none"}else if(n&&e&&t&&o&&f([n,e])!==f([t,o])){document.getElementById("display-info").innerText="Knight is travailing...";var l=performance.now(),s=x([t,o],[n,e],Number(r)),u=performance.now();console.log("KnightsTravails performance time for "+"".concat(a)+"x"+"".concat(a)+" board size: "+"".concat(((u-l)/1e3).toFixed(2)," seconds - RESULT: ")),h.innerText=((u-l)/1e3).toFixed(2)+" seconds",document.getElementById("squares-visited").innerText=s[1].length,s[1].forEach((function(n){var e=f(n),t=document.querySelector('[data-num="'.concat(e,'"]'));t.style.backgroundColor="cadetblue",t.style.opacity=s[1].indexOf(n)/s[1].length+.3,t.innerText=s[1].indexOf(n)+1,t.style.transform="scaleY(-1)",t.style.display="flex",t.style.justifyContent="center",t.style.alignItems="center"})),console.log(s[1]),n=void 0,e=void 0,t=void 0,o=void 0,document.getElementById("START").setAttribute("id",""),i.forEach((function(n){n.style.pointerEvents="none"})),y.style.pointerEvents="none",C.style.pointerEvents="none"}}(a)}));var E=function(n,e){var t=f(e),r=document.querySelector('[data-num="'.concat(t,'"]'));r.style.backgroundColor="cadetblue",r.style.opacity=n.indexOf(e)/n.length+.2,r.innerText=n.indexOf(e)+1,a>10?r.style.fontSize="8.5px":a>20&&(r.style.fontSize="5px"),r.style.transform="scaleY(-1)",r.style.display="flex",r.style.justifyContent="center",r.style.alignItems="center",i.forEach((function(n){n.style.pointerEvents="none"})),y.style.pointerEvents="none",C.style.pointerEvents="none"};b.addEventListener("mousedown",(function(){!function(t){if(n||e){var r=performance.now(),o=S(n,e,Number(t)),i=performance.now();console.log("KnightsTour performance time for "+"".concat(a)+"x"+"".concat(a)+" board size: "+"".concat(((i-r)/1e3).toFixed(2)," seconds - RESULT: ")),h.innerText=((i-r)/1e3).toFixed(2),document.getElementById("squares-visited").innerText=o.length,o.forEach((function(n){E(o,n)})),b.style.pointerEvents="none",v.style.pointerEvents="none",document.getElementById("display-info").innerText="Tour completed",console.log(o)}}(a)})),v.addEventListener("mousedown",(function(){!function(t){if(n||e){var r=performance.now(),o=K(n,e,Number(t)),i=performance.now();console.log("KnightsTourWarnsdorff performance time for "+"".concat(a)+"x"+"".concat(a)+" board size: "+"".concat(((i-r)/1e3).toFixed(2)," seconds - RESULT: ")),h.innerText=((i-r)/1e3).toFixed(2),document.getElementById("squares-visited").innerText=o.length,o.forEach((function(n){E(o,n)})),b.style.pointerEvents="none",v.style.pointerEvents="none",document.getElementById("display-info").innerText="Tour completed",console.log(o)}}(a)}))}(),document.querySelector('[type="image/x-icon"]').href=n,document.getElementById("Knight-img-image").src=r,document.getElementById("github-icon").src=e})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,